package handler

import (
	"log"
	"strconv"
	"strings"

	"github.com/Thomas3246/BrowsMasterManager/internal/entites"
	"github.com/Thomas3246/BrowsMasterManager/internal/service"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandler struct {
	api     *tgbotapi.BotAPI
	service *service.BotService
}

type mainButtonStrings struct {
	newAppointment    string
	myAppointments    string
	cancelAppointment string
	serviceList       string
	aboutMaster       string
	help              string
	confirm           string
	back              string
}

var functionalButtons = mainButtonStrings{
	newAppointment:    "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
	myAppointments:    "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
	cancelAppointment: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
	serviceList:       "üíÜ‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∏",
	aboutMaster:       "üíÅ‚Äç‚ôÄ –û –º–∞—Å—Ç–µ—Ä–µ",
	help:              "‚ùì –ü–æ–º–æ—â—å",
	confirm:           "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ",
	back:              "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
}

var usersAppointments = make(map[int64]*entites.Appointment)

func NewBotHandler(api *tgbotapi.BotAPI, service *service.BotService) *BotHandler {
	return &BotHandler{
		api:     api,
		service: service}
}

func (h *BotHandler) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 30

	updates := h.api.GetUpdatesChan(u)

	for update := range updates {
		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ—è –≥–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
		go h.HandleMessage(&update)
	}
}

func (h *BotHandler) HandleMessage(update *tgbotapi.Update) {

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞
	if update.Message != nil {
		if update.Message.Contact != nil {
			h.handleContact(update)
		} else if update.Message.IsCommand() {

			// –û–±—Ä–∞–±–∞—ã–≤–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥
			switch update.Message.Command() {

			case "start":
				// MiddleWare –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
				h.handleStartCommand(update)

			case "appointment":
				// –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
				// –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–µ –∏–º—è
				usersAppointments[update.FromChat().ID] = &entites.Appointment{}
				handler := h.AuthMiddleWare(h.NameMiddleWare(h.handleNewAppointmentCommand))
				handler(update)

			case "name":
				// –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
				handler := h.AuthMiddleWare(h.handleNameChangeCommand)
				handler(update)
			}

		} else {
			switch update.Message.Text {
			case functionalButtons.newAppointment:
				usersAppointments[update.FromChat().ID] = &entites.Appointment{}
				handler := h.AuthMiddleWare(h.NameMiddleWare(h.handleNewAppointmentCommand))
				handler(update)
			}
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
	if update.CallbackQuery != nil {
		callbackQuery := update.CallbackQuery
		switch {
		case callbackQuery.Data == "callbackConfirmName":
			h.handleConfirmNameCallback(update)

		case callbackQuery.Data == "callbackChangeName":
			h.handleChangeNameCallback(update)

		case strings.HasPrefix(callbackQuery.Data, "todayDate"):
			parts := strings.Split(callbackQuery.Data, " + ")
			dayNumber, err := strconv.Atoi(parts[1])
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ: ", err)
				break
			}

			h.handleDateChooseCallback(callbackQuery, dayNumber, usersAppointments[callbackQuery.From.ID])

		case callbackQuery.Data == "confirmDate":
			h.handleDateConfirmCallback(callbackQuery, usersAppointments[callbackQuery.From.ID])

		case callbackQuery.Data == "backToDate":
			h.handleBackToDate(callbackQuery)

		case strings.HasPrefix(callbackQuery.Data, "chooseTime"):
			parts := strings.Split(callbackQuery.Data, ":")
			hour, err := strconv.Atoi(parts[1])
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ: ", err)
				break
			}
			minute, err := strconv.Atoi(parts[2])
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ: ", err)
				break
			}

			h.handleTimeChooseCallback(callbackQuery, hour, minute, usersAppointments[callbackQuery.From.ID])
		}

	}
}

func attachFunctionalButtons(msg *tgbotapi.MessageConfig) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(functionalButtons.newAppointment)),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(functionalButtons.myAppointments),
			tgbotapi.NewKeyboardButton(functionalButtons.cancelAppointment),
		),
		tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(functionalButtons.aboutMaster)),
		tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(functionalButtons.help)),
	)
	msg.ReplyMarkup = keyboard
}
